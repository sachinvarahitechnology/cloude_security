import type { Answerable } from '../Answerable';
import type { AnswersQuestions } from '../questions';
import { Ability } from './Ability';
import type { UsesAbilities } from './UsesAbilities';
/**
 * This {@apilink Ability} enables an {@apilink Actor} to resolve the value of a given {@apilink Answerable}.
 *
 * {@apilink AnswerQuestions} is used internally by {@apilink Actor.answer}, and it is unlikely you'll ever need to use it directly in your code.
 * That is, unless you're building a custom Serenity/JS extension and want to override the default behaviour of the framework,
 * in which case you should check out the [Contributor's Guide](/contributing).
 *
 * @group Abilities
 */
export declare class AnswerQuestions extends Ability {
    protected readonly actor: AnswersQuestions & UsesAbilities;
    constructor(actor: AnswersQuestions & UsesAbilities);
    answer<T>(answerable: Answerable<T>): Promise<T>;
    private static isAPromise;
    private static isDefined;
}
//# sourceMappingURL=AnswerQuestions.d.ts.map